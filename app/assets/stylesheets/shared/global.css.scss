
@import 'mixins';

/* Reset + base: */
* { margin: 0; padding: 0; border: 0; outline: 0; @include box-sizing; }

/*
html, body { 
  overflow-y: scroll; 
  overflow-x: hidden; 
  position: relative; 
  top: 0; 
  left: 0;
  width: 100%;
  height: 100%;
 }
*/

body { 
  color: #333;
  font-size: 15px; 
  line-height: 26px; 
}

body, input, select, textarea, button { -webkit-font-smoothing: antialiased; text-rendering: optimizeLegibility; font-family: 'Open Sans', sans-serif; -webkit-text-size-adjust: 100%; }

a {
  text-decoration: none;
  color: #690;
  -webkit-tap-highlight-color: #0d0d0d;
  &:hover{
    color: darken(#690, 10%);
  }
}

::-moz-selection { background: #0d0d0d; color: #eee; text-shadow: none; }
::selection { background: #0d0d0d; color: #eee; text-shadow: none; }

img { -ms-interpolation-mode: bicubic; }
strong { font-weight: bold; }
em { font-style: italic; }

.hidden{ display: none; }

/* Clearfix: */
.group:after { content: "."; display: block; height: 0; clear: both; visibility: hidden; }
* html .group { height: 1%; } /* IE6 */
*:first-child+html .group { min-height: 1px; } /* IE7 */
/* End clearfix */
/* End reset + base */

$container_margin: auto;
$total_columns: 12;
$total_width: 960px;
$gutter_width: 20px;

// grid setup
.row {
  width: $total_width; margin: 0 auto; @include transition(width 150ms linear);

  &.half { width: $total_width / 2; }

  &:after { content: "."; display: block; height: 0; clear: both; visibility: hidden; }
}

@for $i from 1 through $total_columns {
  .col#{$i} {
    width: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) - $gutter_width;
    float: left;
    margin-left: $gutter_width / 2;
    margin-right: $gutter_width / 2;

    @include transition((width 150ms linear, margin 150ms linear));
  }

  @for $j from 1 through $total_columns {
    .col#{$j}.push#{$i}, .push#{$i} {
      margin-left: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) + ($gutter_width / 2);
    }
  }
}

@include one-column {
  $total_width: 320px;
  .row {
    width: $total_width;

    &.half { width: $total_width; }
  }

  @for $i from 1 through $total_columns {
    .col#{$i} {
      width: ($total_width / $total_columns - $gutter_width) * 12 + (12 * $gutter_width) - $gutter_width;
      float: none;
      margin-left: $gutter_width / 2;
      margin-right: $gutter_width / 2;
    }

    @for $j from 1 through $total_columns {
      .col#{$j}.push#{$i}, .push#{$i} {
        margin-left: $gutter_width / 2;
      }
    }
  }
}

@include two-columns {
  $total_width: 640px;
  .row {
    width: $total_width;

    &.half { width: $total_width / 2; }
  }

  @for $i from 1 through $total_columns {
    .col#{$i} {
      width: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) - $gutter_width;
      float: left;
    }

    @for $j from 1 through $total_columns {
      .col#{$j}.push#{$i}, .push#{$i} {
        margin-left: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) + ($gutter_width / 2);
      }
    }
  }
}

@include four-columns {
  $total_width: 1280px;
  .row {
    width: $total_width;

    &.half { width: $total_width / 2; }
  }

  @for $i from 1 through $total_columns {
    .col#{$i} {
      width: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) - $gutter_width;
      float: left;
    }

    @for $j from 1 through $total_columns {
      .col#{$j}.push#{$i}, .push#{$i} {
        margin-left: ($total_width / $total_columns - $gutter_width) * $i + ($i * $gutter_width) + ($gutter_width / 2);
      }
    }
  }
}



